Name:       hootenanny
Version:    %%HOOT_VERSION%%
Release:    1%{?dist}
Summary:    Hootenanny - we merge maps.

Group:      Applications/Engineering
License:    GPLv3
URL:        https://github.com/ngageoint/hootenanny

BuildRoot:  %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)
BuildRequires:  autoconf automake boost-devel cppunit-devel doxygen gcc-c++
BuildRequires:  gdal-devel >= 1.10.1
BuildRequires:  gdal-python >= 1.10.1
BuildRequires:  gdal-esri-epsg >= 1.10.1
BuildRequires:  gdb
BuildRequires:  geos-devel = 3.4.2
BuildRequires:  git glpk-devel graphviz libicu-devel
BuildRequires:  hootenanny-words = 1.0.0
BuildRequires:  libspatialite-devel
BuildRequires:  log4cxx-devel nodejs-devel opencv-devel
BuildRequires:  postgresql-devel >= 9.1
BuildRequires:  proj-devel protobuf-devel python-argparse python-devel qt-devel
# Needed to build the documentation
BuildRequires:  texlive libxslt
BuildRequires:  gnuplot
BuildRequires:  unzip v8-devel w3m wget words zip

Source0:        %{name}-%{version}.tar.gz

%description
Hootenanny was developed to provide an open source, standards-based approach to
geospatial vector data conflation. Hootenanny is designed to facilitate
automated and semi-automated conflation of critical foundation GEOINT features
in the topographic domain, namely roads (polylines), buildings (polygons), and
points-of-interest (POI's) (points). Conflation happens at the dataset level,
where the user's workflow determines the best reference dataset and source
content, geometry and attributes, to transfer to the output map.

%package core
Summary:    Hootenanny Core
Requires:   %{name}-core-deps = %{version}-%{release}
Group:      Applications/Engineering

%description core
Hootenanny was developed to provide an open source, standards-based approach to
geospatial vector data conflation. Hootenanny is designed to facilitate
automated and semi-automated conflation of critical foundation GEOINT features
in the topographic domain, namely roads (polylines), buildings (polygons), and
points-of-interest (POI's) (points). Conflation happens at the dataset level,
where the user's workflow determines the best reference dataset and source
content, geometry and attributes, to transfer to the output map.

This package contains the core algorithms and command line interface.

%prep
%setup -q -n %{name}-%{version}

%build
source ./SetupEnv.sh
export JAVA_HOME=/etc/alternatives/jre_1.7.0
# The dir configurations set the install directory to work with EL's dir structure
./configure --with-rnd --with-services -q \
    --prefix=$RPM_BUILD_ROOT/usr/ \
    --datarootdir=$RPM_BUILD_ROOT/usr/share/hootenanny/ \
    --docdir=$RPM_BUILD_ROOT/usr/share/doc/hootenanny/ \
    --localstatedir=$RPM_BUILD_ROOT/var/lib/hootenanny/ \
    --libdir=$RPM_BUILD_ROOT/usr/lib64 \
    --sysconfdir=$RPM_BUILD_ROOT/etc/

# Use ccache if it is available
cp LocalConfig.pri.orig LocalConfig.pri
command -v ccache >/dev/null 2>&1 && echo "QMAKE_CXX=ccache g++" >> LocalConfig.pri

make -s %{?_smp_mflags}

# This may be causing failure due to node-mapnik dependency on
# Requires: libc.so.6(GLIBC_2.14)(64bit)
# Install node modules
#cd node-mapnik-server
#npm install

%install

# UI stuff
mkdir -p $RPM_BUILD_ROOT/var/lib/tomcat6/webapps
cp hoot-services/target/hoot-services*.war $RPM_BUILD_ROOT/var/lib/tomcat6/webapps/hoot-services.war
cp -R hoot-ui/ $RPM_BUILD_ROOT/var/lib/tomcat6/webapps/hootenanny-id
mkdir -p $RPM_BUILD_ROOT/etc/init.d
cp node-mapnik-server/init.d/centos-rpm $RPM_BUILD_ROOT/etc/init.d/node-mapnik-server
mkdir -p $RPM_BUILD_ROOT/var/lib/hootenanny
cp -R node-mapnik-server/ $RPM_BUILD_ROOT/var/lib/hootenanny/node-mapnik-server

make install
echo "export HOOT_HOME=/var/lib/hootenanny" > $RPM_BUILD_ROOT/etc/profile.d/hootenanny.sh
chmod 755 $RPM_BUILD_ROOT/etc/profile.d/hootenanny.sh
cp -R test-files/ $RPM_BUILD_ROOT/var/lib/hootenanny/
ln -s /usr/lib64 $RPM_BUILD_ROOT/var/lib/hootenanny/lib
rm $RPM_BUILD_ROOT/usr/bin/HootEnv.sh
# This allows all the tests to run.
mkdir -p $RPM_BUILD_ROOT/var/lib/hootenanny/hoot-core-test/src/test/
ln -s /var/lib/hootenanny/test-files/ $RPM_BUILD_ROOT/var/lib/hootenanny/hoot-core-test/src/test/resources
# This makes it so HootEnv.sh resolves hoot home properly.
ln -s /var/lib/hootenanny/bin/HootEnv.sh $RPM_BUILD_ROOT/usr/bin/HootEnv.sh
# Fix the docs for the UI
ln -s /usr/share/doc/hootenanny  $RPM_BUILD_ROOT/var/lib/hootenanny/docs


%check
source ./SetupEnv.sh
export JAVA_HOME=/etc/alternatives/jre_1.7.0
# The excluded tests are failing on CentOS now and waiting on a fix
# https://github.com/ngageoint/hootenanny/issues/279
# https://github.com/ngageoint/hootenanny/issues/281
HootTest --exclude=.*RubberSheetConflateTest.sh \
    --exclude=.*ConflateAverageTest.sh \
    --exclude=.*ConflateCmdHighwayExactMatchInputsTest.sh \
    --exclude=.*Osm2OgrTranslation.sh \
    --slow --diff
cd hoot-services
make test -s

%clean
rm -rf %{buildroot}

%files core
%{_includedir}/hoot
%{_libdir}/*
%docdir /usr/share/doc/%{name}
%{_datarootdir}/doc/%{name}
%{_bindir}/*
%config %{_sharedstatedir}/%{name}/conf/hoot.json
%{_sharedstatedir}/%{name}
%{_sysconfdir}/profile.d/hootenanny.sh
%{_sysconfdir}/asciidoc/filters/




%package services-ui
Summary:    Hootenanny UI and Services
Requires:   %{name}-core = %{version}-%{release}
Requires:   postgresql-server >= 9.1
Requires:   postgresql-contrib >= 9.1
Requires:   postgis2_92 >= 2.1
Requires:   tomcat6
Requires:   liquibase
Requires:   pwgen
Group:      Applications/Engineering

%description services-ui
Hootenanny was developed to provide an open source, standards-based approach to
geospatial vector data conflation. Hootenanny is designed to facilitate
automated and semi-automated conflation of critical foundation GEOINT features
in the topographic domain, namely roads (polylines), buildings (polygons), and
points-of-interest (POI's) (points). Conflation happens at the dataset level,
where the user's workflow determines the best reference dataset and source
content, geometry and attributes, to transfer to the output map.

This package contains the UI and web services.

%files services-ui
%attr(755, tomcat, tomcat) %{_sharedstatedir}/tomcat6/webapps/hoot-services.war
%attr(755, tomcat, tomcat) %{_sharedstatedir}/tomcat6/webapps/hootenanny-id
/etc/init.d/node-mapnik-server

#the order of operations during an upgrade is:
#
#    1. Run the %pre section of the RPM being installed.
#    2. Install the files that the RPM provides.
#    3. Run the %post section of the RPM.
#    4. Run the %preun of the old package.
#    5. Delete any old files not overwritten by the newer version. (This step deletes files that the new package does not require.)
#    6. Run the %postun hook of the old package.

%pre services-ui
if [ "$1" = "2" ]; then
    # Perform whatever maintenance must occur before the upgrade

    # Remove exploded hoot-services war remnants
    SERVICES_HOME=/var/lib/tomcat6/webapps/hoot-services
    if [ -d $SERVICES_HOME ]; then
        sudo rm -rf $SERVICES_HOME
    fi
fi

%post services-ui
function updateConfigFiles () {
    # Update the db password in hoot-services war
    source /var/lib/hootenanny/conf/DatabaseConfig.sh
    while [ ! -f /var/lib/tomcat6/webapps/hoot-services/WEB-INF/classes/db/spring-database.xml ]; do
        echo "Waiting for hoot-services.war to deploy"
        sleep 1
    done
    sudo sed -i s/password\:\ hoottest/password\:\ $DB_PASSWORD/ /var/lib/tomcat6/webapps/hoot-services/WEB-INF/classes/db/liquibase.properties
    sudo sed -i s/value=\"hoottest\"/value=\"$DB_PASSWORD\"/ /var/lib/tomcat6/webapps/hoot-services/WEB-INF/classes/db/spring-database.xml
    sudo sed -i s/dbPassword=hoottest/dbPassword=$DB_PASSWORD/g /var/lib/tomcat6/webapps/hoot-services/WEB-INF/classes/conf/hoot-services.conf
    sudo sed -i s/\<Password\>hoottest\<\\/Password\>/\<Password\>$DB_PASSWORD\<\\/Password\>/ /var/lib/tomcat6/webapps/hoot-services/WEB-INF/workspace/jdbc/WFS_Connection.xml
    sudo sed -i s/\<jdbcPassword\>hoottest\<\\/jdbcPassword\>/\<jdbcPassword\>$DB_PASSWORD\<\\/jdbcPassword\>/ /var/lib/tomcat6/webapps/hoot-services/META-INF/maven/hoot/hoot-services/pom.xml

    sudo service tomcat6 restart
}

function updateLiquibase () {

    # Add hostname alias to 127.0.0.1 to avoid liquibase unknown hostname error
    if ! grep --quiet $(hostname) /etc/hosts; then
        sudo sed -i "1 s/$/ $(hostname)/" /etc/hosts
    fi

    # Apply any database schema changes
    source /var/lib/hootenanny/conf/DatabaseConfig.sh
    TOMCAT_HOME=/usr/share/tomcat6
    source /var/lib/hootenanny/conf/DatabaseConfig.sh
    cd $TOMCAT_HOME/webapps/hoot-services/WEB-INF
    liquibase --contexts=default,production \
        --changeLogFile=classes/db/db.changelog-master.xml \
        --promptForNonLocalDatabase=false \
        --driver=org.postgresql.Driver \
        --url=jdbc:postgresql://$DB_HOST:$DB_PORT/$DB_NAME \
        --username=$DB_USER \
        --password=$DB_PASSWORD \
        --logLevel=warning \
        --classpath=lib/postgresql-9.4.1208.jre7.jar \
        update
}
if [ "$1" = "1" ]; then
    # Perform tasks to prepare for the initial installation
    source /etc/profile.d/hootenanny.sh

    # init and start Postgres
    PG_SERVICE=$(ls /etc/init.d | grep postgresql-)
    sudo service $PG_SERVICE initdb
    sudo service $PG_SERVICE start
    PG_VERSION=$(sudo -u postgres psql -c 'SHOW SERVER_VERSION;' | egrep -o '[0-9]{1,}\.[0-9]{1,}')

    sudo service tomcat6 start

    # create Hoot services db
    if ! sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw hoot; then
        RAND_PW=$(pwgen -s 16 1)
        sudo -u postgres createuser --superuser hoot || true
        sudo -u postgres psql -c "alter user hoot with password '$RAND_PW';"
        if [ -f /var/lib/hootenanny/conf/DatabaseConfigDefault.sh ]; then
            echo "export DB_PASSWORD=$RAND_PW" | sudo tee /var/lib/hootenanny/conf/DatabaseConfigLocal.sh > /dev/null
            echo "export DB_PASSWORD_OSMAPI=$RAND_PW" | sudo tee --append /var/lib/hootenanny/conf/DatabaseConfigLocal.sh > /dev/null
            sudo chmod a+x /var/lib/hootenanny/conf/DatabaseConfigLocal.sh
        else
        sudo sed -i s/DB_PASSWORD=.*/DB_PASSWORD=$RAND_PW/ /var/lib/hootenanny/conf/DatabaseConfig.sh
        fi
        sudo -u postgres createdb hoot --owner=hoot
        sudo -u postgres createdb wfsstoredb --owner=hoot
        sudo -u postgres psql -d hoot -c 'create extension hstore;'
        sudo -u postgres psql -d postgres -c "UPDATE pg_database SET datistemplate='true' WHERE datname='wfsstoredb'"
        sudo -u postgres psql -d wfsstoredb -c 'create extension postgis;'
    fi

    # restore saved db config file settings if present
    if [ -f /var/lib/hootenanny/conf/DatabaseConfig.sh.rpmsave ]; then
        if [ -f /var/lib/hootenanny/conf/DatabaseConfigDefault.sh ]; then
            grep DB_PASSWORD /var/lib/hootenanny/conf/DatabaseConfig.sh.rpmsave | sudo tee /var/lib/hootenanny/conf/DatabaseConfigLocal.sh > /dev/null
            sudo chmod a+x /var/lib/hootenanny/conf/DatabaseConfigLocal.sh
        else
        sudo mv /var/lib/hootenanny/conf/DatabaseConfig.sh.rpmsave /var/lib/hootenanny/conf/DatabaseConfig.sh
    fi
    fi

    # configure Postgres settings
    PG_HB_CONF=/var/lib/pgsql/$PG_VERSION/data/pg_hba.conf
    if ! sudo grep -i --quiet hoot $PG_HB_CONF; then
        sudo -u postgres cp $PG_HB_CONF $PG_HB_CONF.orig
        sudo -u postgres sed -i '1ihost    all            hoot            127.0.0.1/32            md5' $PG_HB_CONF
        sudo -u postgres sed -i '1ihost    all            hoot            ::1/128                 md5' $PG_HB_CONF
    fi
    POSTGRES_CONF=/var/lib/pgsql/$PG_VERSION/data/postgresql.conf
    if ! grep -i --quiet HOOT $POSTGRES_CONF; then
        sudo -u postgres cp $POSTGRES_CONF $POSTGRES_CONF.orig
        sudo -u postgres sed -i s/^max_connections/\#max_connections/ $POSTGRES_CONF
        sudo -u postgres sed -i s/^shared_buffers/\#shared_buffers/ $POSTGRES_CONF
        sudo -u postgres bash -c "cat >> $POSTGRES_CONF" <<EOT
#--------------
# Hoot Settings
#--------------
max_connections = 1000
shared_buffers = 1024MB
max_files_per_process = 1000
work_mem = 16MB
maintenance_work_mem = 256MB
checkpoint_segments = 20
autovacuum = off
EOT
    fi
    # configure kernel parameters
    SYSCTL_CONF=/etc/sysctl.conf
    if ! grep --quiet 1173741824 $SYSCTL_CONF; then
        sudo cp $SYSCTL_CONF $SYSCTL_CONF.orig
        echo "Setting kernel.shmmax"
        sudo sysctl -w kernel.shmmax=1173741824
        sudo sh -c "echo 'kernel.shmmax=1173741824' >> $SYSCTL_CONF"
        #                 kernel.shmmax=68719476736
    fi
    if ! grep --quiet 2097152 $SYSCTL_CONF; then
        echo "Setting kernel.shmall"
        sudo sysctl -w kernel.shmall=2097152
        sudo sh -c "echo 'kernel.shmall=2097152' >> $SYSCTL_CONF"
        #                 kernel.shmall=4294967296
    fi
    sudo service postgresql-$PG_VERSION restart

    # create the osm api test db
    /var/lib/hootenanny/scripts/SetupOsmApiDB.sh

    # Create Tomcat context path for tile images
    TOMCAT_SRV=/etc/tomcat6/server.xml
    if ! grep -i --quiet 'ingest/processed' $TOMCAT_SRV; then
        sudo -u tomcat cp $TOMCAT_SRV $TOMCAT_SRV.orig
        echo "Adding Tomcat context path for tile images"
        sudo sed -i "s@<\/Host>@ <Context docBase=\"\/var\/lib\/hootenanny\/ingest\/processed\" path=\"\/static\" \/>\n &@" $TOMCAT_SRV
    fi
    # Allow linking in Tomcat context
    TOMCAT_CTX=/etc/tomcat6/context.xml
    if ! grep -i --quiet 'allowLinking="true"' $TOMCAT_CTX; then
        sudo -u tomcat cp $TOMCAT_CTX $TOMCAT_CTX.orig
        echo "Set allowLinking to true in Tomcat context"
        sudo sed -i "s@^<Context>@<Context allowLinking=\"true\">@" $TOMCAT_CTX
    fi
    # Create directories for webapp
    TOMCAT_HOME=/usr/share/tomcat6
    if [ ! -d $TOMCAT_HOME/.deegree ]; then
        echo "Creating .deegree directory for webapp"
        sudo mkdir $TOMCAT_HOME/.deegree
        sudo chown tomcat:tomcat $TOMCAT_HOME/.deegree
    fi
    BASEMAP_UPLOAD_HOME=/var/lib/hootenanny/ingest/upload
    if [ ! -d $BASEMAP_UPLOAD_HOME ]; then
        echo "Creating ingest/upload directory for webapp"
        sudo mkdir -p $BASEMAP_UPLOAD_HOME
        sudo chown tomcat:tomcat $BASEMAP_UPLOAD_HOME
    fi
    BASEMAP_PROCESSED_HOME=/var/lib/hootenanny/ingest/processed
    if [ ! -d $BASEMAP_PROCESSED_HOME ]; then
        echo "Creating ingest/processed directory for webapp"
        sudo mkdir -p $BASEMAP_PROCESSED_HOME
        sudo chown tomcat:tomcat $BASEMAP_PROCESSED_HOME
    fi
    UPLOAD_HOME=/var/lib/hootenanny/upload
    if [ ! -d $UPLOAD_HOME ]; then
        echo "Creating upload directory for webapp"
        sudo mkdir -p $UPLOAD_HOME
        sudo chown tomcat:tomcat $UPLOAD_HOME
    fi
    CUSTOMSCRIPT_HOME=/var/lib/hootenanny/customscript
    if [ ! -d $CUSTOMSCRIPT_HOME ]; then
        echo "Creating customscript directory for webapp"
        sudo mkdir -p $CUSTOMSCRIPT_HOME
        sudo chown tomcat:tomcat $CUSTOMSCRIPT_HOME
    fi
    TMP_HOME=/var/lib/hootenanny/tmp
    if [ ! -d $TMP_HOME ]; then
        echo "Creating tmp directory for webapp"
        sudo mkdir -p $TMP_HOME
        sudo chown tomcat:tomcat $TMP_HOME
    fi
    REPORT_HOME=/var/lib/hootenanny/data/reports
    if [ ! -d $REPORT_HOME ]; then
        echo "Creating data/reports directory for webapp"
        sudo mkdir -p $REPORT_HOME
        sudo chown tomcat:tomcat $REPORT_HOME
        sudo chown tomcat:tomcat $REPORT_HOME/..
    fi

    updateConfigFiles
    updateLiquibase

    # Configuring firewall
    if ! sudo iptables --list-rules | grep -i --quiet 'dport 80'; then
        sudo iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
        sudo iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT
        sudo iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 8000 -j ACCEPT
        sudo iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 8094 -j ACCEPT
        sudo iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 8096 -j ACCEPT
        sudo iptables -I PREROUTING -t nat -p tcp --dport 80 -j REDIRECT --to-ports 8080
        sudo iptables -I OUTPUT -t nat -s 0/0 -d 127/8 -p tcp --dport 80 -j REDIRECT --to-ports 8080
        sudo service iptables save
        sudo service iptables restart
    fi
elif [ "$1" = "2" ]; then
    # Perform whatever maintenance must occur after the upgrade

    # copy values from saved db config file, if present
    if [ -f /var/lib/hootenanny/conf/DatabaseConfig.sh.rpmsave ]; then
        if [ -f /var/lib/hootenanny/conf/DatabaseConfigDefault.sh ]; then
            grep DB_PASSWORD /var/lib/hootenanny/conf/DatabaseConfig.sh.rpmsave | sudo tee /var/lib/hootenanny/conf/DatabaseConfigLocal.sh > /dev/null
            sudo chmod a+x /var/lib/hootenanny/conf/DatabaseConfigLocal.sh
        else
            sudo mv /var/lib/hootenanny/conf/DatabaseConfig.sh.rpmsave /var/lib/hootenanny/conf/DatabaseConfig.sh
        fi
    fi

    source /etc/profile.d/hootenanny.sh
    source /var/lib/hootenanny/conf/DatabaseConfig.sh

    updateConfigFiles
    updateLiquibase
fi

%postun services-ui
if [ "$1" = "0" ]; then
    # Perform tasks to clean up after uninstallation

    # Stop tomcat
    sudo service tomcat6 stop
    # Ensure Postgres is started
    PG_SERVICE=$(ls /etc/init.d | grep postgresql-)
    sudo service $PG_SERVICE start
    PG_VERSION=$(sudo -u postgres psql -c 'SHOW SERVER_VERSION;' | egrep -o '[0-9]{1,}\.[0-9]{1,}')

    # Restore Postgres settings
    PG_HB_CONF=/var/lib/pgsql/$PG_VERSION/data/pg_hba.conf
    if sudo grep -i --quiet hoot $PG_HB_CONF; then
        sudo -u postgres mv $PG_HB_CONF.orig $PG_HB_CONF
    fi
    POSTGRES_CONF=/var/lib/pgsql/$PG_VERSION/data/postgresql.conf
    if grep -i --quiet HOOT $POSTGRES_CONF; then
        sudo -u postgres mv $POSTGRES_CONF.orig $POSTGRES_CONF
    fi
    # Restore kernal parameters
    if sysctl -e kernel.shmmax | grep --quiet 1173741824; then
        sudo mv /etc/sysctl.conf.orig /etc/sysctl.conf
    fi

    # Restore original file
    TOMCAT_SRV=/etc/tomcat6/server.xml
    if grep -i --quiet 'ingest/processed' $TOMCAT_SRV; then
        sudo -u tomcat mv $TOMCAT_SRV.orig $TOMCAT_SRV
    fi
    # Restore original file
    TOMCAT_CTX=/etc/tomcat6/context.xml
    if grep -i --quiet 'allowLinking="true"' $TOMCAT_CTX; then
        sudo -u tomcat mv $TOMCAT_CTX.orig $TOMCAT_CTX
    fi
    # Remove .deegree directory
    TOMCAT_HOME=/usr/share/tomcat6
    if [ -d $TOMCAT_HOME/.deegree ]; then
        sudo rm -rf $TOMCAT_HOME/.deegree
    fi
    # Remove exploded hoot-services war remnants
    SERVICES_HOME=/var/lib/tomcat6/webapps/hoot-services
    if [ -d $SERVICES_HOME ]; then
        sudo rm -rf $SERVICES_HOME
    fi
    sudo service tomcat6 start

    # Configuring firewall
    if sudo iptables --list-rules | grep -i --quiet 'dport 80'; then
        sudo iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
        sudo iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT
        sudo iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 8000 -j ACCEPT
        sudo iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 8094 -j ACCEPT
        sudo iptables -D INPUT -p tcp -m state --state NEW -m tcp --dport 8096 -j ACCEPT
        sudo iptables -D PREROUTING -t nat -p tcp --dport 80 -j REDIRECT --to-ports 8080
        sudo iptables -D OUTPUT -t nat -s 0/0 -d 127/8 -p tcp --dport 80 -j REDIRECT --to-ports 8080
        sudo service iptables save
        sudo service iptables restart
    fi
fi



%package    autostart
Summary:    Hootenanny Autostart
Requires:   %{name}-services-ui = %{version}-%{release}
Group:      Applications/Engineering

%description autostart
Hootenanny was developed to provide an open source, standards-based approach to
geospatial vector data conflation. Hootenanny is designed to facilitate
automated and semi-automated conflation of critical foundation GEOINT features
in the topographic domain, namely roads (polylines), buildings (polygons), and
points-of-interest (POI's) (points). Conflation happens at the dataset level,
where the user's workflow determines the best reference dataset and source
content, geometry and attributes, to transfer to the output map.

This package sets the PostgreSQL and Tomcat and NodeJS services to autostart
to run Hootenanny.

%files autostart

%post autostart
# set Postgres to autostart
export PG_VERSION=$(sudo -u postgres psql -c 'SHOW SERVER_VERSION;' | egrep -o '[0-9]{1,}\.[0-9]{1,}')
sudo /sbin/chkconfig --add postgresql-$PG_VERSION
sudo /sbin/chkconfig postgresql-$PG_VERSION on
# set Tomcat to autostart
sudo /sbin/chkconfig --add tomcat6
sudo /sbin/chkconfig tomcat6 on
# set NodeJS node-mapnik-server to autostart
sudo /sbin/chkconfig --add node-mapnik-server
sudo /sbin/chkconfig node-mapnik-server on

%postun autostart
# set Postgres to NOT autostart
export PG_VERSION=$(sudo -u postgres psql -c 'SHOW SERVER_VERSION;' | egrep -o '[0-9]{1,}\.[0-9]{1,}')
sudo /sbin/chkconfig --del postgresql-$PG_VERSION
# set Tomcat to NOT autostart
sudo /sbin/chkconfig --del tomcat6
# set NodeJS node-mapnik-server to NOT autostart
sudo /sbin/chkconfig --del node-mapnik-server

%package services-devel-deps
Summary:    Development dependencies for Hootenanny Services
Group:      Development/Libraries
Requires:   %{name}-core-devel-deps = %{version}-%{release}
Requires:   apache-maven
Requires:   java-1.7.0-openjdk-devel
Requires:   nodejs
Requires:   npm
Requires:   postgresql-server >= 9.1
Requires:   postgresql-contrib >= 9.1
Requires:   postgis2_92 >= 2.1
Requires:   liquibase

%description services-devel-deps
Hootenanny was developed to provide an open source, standards-based approach to
geospatial vector data conflation. Hootenanny is designed to facilitate
automated and semi-automated conflation of critical foundation GEOINT features
in the topographic domain, namely roads (polylines), buildings (polygons), and
points-of-interest (POI's) (points). Conflation happens at the dataset level,
where the user's workflow determines the best reference dataset and source
content, geometry and attributes, to transfer to the output map.

This packages contains the dependencies to build and develop the Hootenanny
services. Use this if you want to build and test from github.

%files services-devel-deps

%post services-devel-deps
if [ "$1" = "1" ]; then
    # Perform tasks to prepare for the initial installation

    # init and start Postgres
    PG_SERVICE=$(ls /etc/init.d | grep postgresql-)
    sudo service $PG_SERVICE initdb
    sudo service $PG_SERVICE start
    PG_VERSION=$(sudo -u postgres psql -c 'SHOW SERVER_VERSION;' | egrep -o '[0-9]{1,}\.[0-9]{1,}')

    sudo service tomcat6 start

    # create Hoot services db
    if ! sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw hoot; then
        sudo -u postgres createuser --superuser hoot || true
        sudo -u postgres psql -c "alter user hoot with password 'hoottest';"
        sudo -u postgres createdb hoot --owner=hoot
        sudo -u postgres createdb wfsstoredb --owner=hoot
        sudo -u postgres psql -d hoot -c 'create extension hstore;'
        sudo -u postgres psql -d postgres -c "UPDATE pg_database SET datistemplate='true' WHERE datname='wfsstoredb'"
        sudo -u postgres psql -d wfsstoredb -c 'create extension postgis;'
    fi

    # configure Postgres settings
    PG_HB_CONF=/var/lib/pgsql/$PG_VERSION/data/pg_hba.conf
    if ! sudo grep -i --quiet hoot $PG_HB_CONF; then
        sudo -u postgres cp $PG_HB_CONF $PG_HB_CONF.orig
        sudo -u postgres sed -i '1ihost    all            hoot            127.0.0.1/32            md5' $PG_HB_CONF
        sudo -u postgres sed -i '1ihost    all            hoot            ::1/128                 md5' $PG_HB_CONF
    fi
    POSTGRES_CONF=/var/lib/pgsql/$PG_VERSION/data/postgresql.conf
    if ! grep -i --quiet HOOT $POSTGRES_CONF; then
        sudo -u postgres cp $POSTGRES_CONF $POSTGRES_CONF.orig
        sudo -u postgres sed -i s/^max_connections/\#max_connections/ $POSTGRES_CONF
        sudo -u postgres sed -i s/^shared_buffers/\#shared_buffers/ $POSTGRES_CONF
        sudo -u postgres bash -c "cat >> $POSTGRES_CONF" <<EOT
#--------------
# Hoot Settings
#--------------
max_connections = 1000
shared_buffers = 1024MB
max_files_per_process = 1000
work_mem = 16MB
maintenance_work_mem = 256MB
checkpoint_segments = 20
autovacuum = off
EOT
    fi
    # configure kernel parameters
    SYSCTL_CONF=/etc/sysctl.conf
    if ! grep --quiet 1173741824 $SYSCTL_CONF; then
        sudo cp $SYSCTL_CONF $SYSCTL_CONF.orig
        echo "Setting kernel.shmmax"
        sudo sysctl -w kernel.shmmax=1173741824
        sudo sh -c "echo 'kernel.shmmax=1173741824' >> $SYSCTL_CONF"
        #                 kernel.shmmax=68719476736
    fi
    if ! grep --quiet 2097152 $SYSCTL_CONF; then
        echo "Setting kernel.shmall"
        sudo sysctl -w kernel.shmall=2097152
        sudo sh -c "echo 'kernel.shmall=2097152' >> $SYSCTL_CONF"
        #                 kernel.shmall=4294967296
    fi
    sudo service postgresql-$PG_VERSION restart
fi

%postun services-devel-deps
if [ "$1" = "0" ]; then
    # Perform tasks to clean up after uninstallation

    # Ensure Postgres is started
    PG_SERVICE=$(ls /etc/init.d | grep postgresql-)
    sudo service $PG_SERVICE start
    PG_VERSION=$(sudo -u postgres psql -c 'SHOW SERVER_VERSION;' | egrep -o '[0-9]{1,}\.[0-9]{1,}')

    # Restore Postgres settings
    PG_HB_CONF=/var/lib/pgsql/$PG_VERSION/data/pg_hba.conf
    if sudo grep -i --quiet hoot $PG_HB_CONF; then
        sudo -u postgres mv $PG_HB_CONF.orig $PG_HB_CONF
    fi
    POSTGRES_CONF=/var/lib/pgsql/$PG_VERSION/data/postgresql.conf
    if grep -i --quiet HOOT $POSTGRES_CONF; then
        sudo -u postgres mv $POSTGRES_CONF.orig $POSTGRES_CONF
    fi
    # Restore kernal parameters
    if sysctl -e kernel.shmmax | grep --quiet 1173741824; then
        sudo mv /etc/sysctl.conf.orig /etc/sysctl.conf
    fi
fi

%package core-devel-deps
Summary:    Development dependencies for Hootenanny Core
Group:      Development/Libraries
Requires:   %{name}-core-deps = %{version}-%{release}
Requires:   autoconf automake boost-devel cppunit-devel gcc-c++
Requires:       gdb
Requires:       geos-devel = 3.4.2
Requires:       git glpk-devel libicu-devel
Requires:   hootenanny-words = 1.0.0
Requires:       libspatialite-devel
Requires:       log4cxx-devel nodejs-devel opencv-devel
Requires:       postgresql-devel >= 9.1
Requires:       proj-devel protobuf-devel python-argparse python-devel qt-devel v8-devel
Requires:   stxxl-devel
# Needed to build the documentation
Requires:       texlive

%description core-devel-deps
Hootenanny was developed to provide an open source, standards-based approach to
geospatial vector data conflation. Hootenanny is designed to facilitate
automated and semi-automated conflation of critical foundation GEOINT features
in the topographic domain, namely roads (polylines), buildings (polygons), and
points-of-interest (POI's) (points). Conflation happens at the dataset level,
where the user's workflow determines the best reference dataset and source
content, geometry and attributes, to transfer to the output map.

This packages contains the dependencies to build and develop the Hootenanny
core. Use this if you want to build from github.

%files core-devel-deps

%package core-deps
Summary:    Dependencies for Hootenanny Core
Group:      Development/Libraries
Requires:   asciidoc cppunit dblatex doxygen FileGDB_API
Requires:       gdal-devel >= 1.10.1
Requires:       gdal-python >= 1.10.1
Requires:       gdal-esri-epsg >= 1.10.1
Requires:       geos = 3.4.2, gnuplot, graphviz
Requires:   hootenanny-words = 1.0.0
# Needed by gnuplot for report generation
Requires:       liberation-fonts-common liberation-sans-fonts
Requires:       libxslt log4cxx nodejs opencv  protobuf qt
Requires:       postgresql-libs >= 9.1
Requires:       qt-postgresql
Requires:       stxxl
Requires:       texlive
Requires:       unzip w3m wget words
Requires:       zip

%description core-deps
Hootenanny was developed to provide an open source, standards-based approach to
geospatial vector data conflation. Hootenanny is designed to facilitate
automated and semi-automated conflation of critical foundation GEOINT features
in the topographic domain, namely roads (polylines), buildings (polygons), and
points-of-interest (POI's) (points). Conflation happens at the dataset level,
where the user's workflow determines the best reference dataset and source
content, geometry and attributes, to transfer to the output map.

This packages contains the dependencies to run the Hootenanny core.

%files core-deps

%changelog
* Tue Aug 30 2016 Matt Jackson <matthew.jackson@digitalglobe.com> - 0.2.23+
- Added symlink for hootenanny docs so they are available in the UI

* Thu Feb 25 2016 Brian Hatchl <brian.hatchl@digitalglobe.com> - 0.2.23+
- Adding ui-services and autostart packages

* Fri Jan 29 2016 Ben Marchant <benjamin.marchant@digitalglobe.com> - 0.2.21+
- Adding stxxl and stxxl-devel

* Thu Jan 21 2016 Jason R. Surratt <jason.surratt@digitalglobe.com> - 0.2.21+
- Initial attempt

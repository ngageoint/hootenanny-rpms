# -*- mode: ruby -*-
# vi: set ft=ruby :

$provisionSh = <<-SHELL
    set -e
    set -x

    # Enable NTP to synchronize clock
    sudo yum -y install ntp
    sudo chkconfig ntpd on
    sudo ntpdate pool.ntp.org
    sudo /etc/init.d/ntpd start

    echo "[hoot]" | sudo tee /etc/yum.repos.d/hoot.repo
    echo "name=hoot" | sudo tee -a /etc/yum.repos.d/hoot.repo
    echo "baseurl=file:///home/vagrant/el6/" | sudo tee -a /etc/yum.repos.d/hoot.repo
    echo "gpgcheck=0" | sudo tee -a /etc/yum.repos.d/hoot.repo
    sudo yum -y update --exclude=puppet*
    sudo yum -y install hootenanny-autostart

    # Fix Postgres
    # NOTE: The will get fixed in the VM - later....
    echo
    echo "About to tune Postgres"
    if ! sudo grep -i --quiet HOOT /var/lib/pgsql/9.2/data/postgresql.conf; then
        echo "Tuning PostgreSQL"
        sudo -u postgres sed -i.bak s/^max_connections/\#max_connections/ /var/lib/pgsql/9.2/data/postgresql.conf
        sudo -u postgres sed -i.bak s/^shared_buffers/\#shared_buffers/ /var/lib/pgsql/9.2/data/postgresql.conf
        sudo -u postgres bash -c "cat >> /var/lib/pgsql/9.2/data/postgresql.conf" <<EOT
#--------------
# Hoot Settings
#--------------
max_connections = 1000
shared_buffers = 1024MB
max_files_per_process = 1000
work_mem = 16MB
maintenance_work_mem = 256MB
checkpoint_segments = 20
autovacuum = off
EOT

        echo
        echo "About to restart Postgres"
        sudo /etc/init.d/postgresql-9.2 restart
    fi



 SHELL

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "CommanderK5/vagrant-centos-6.7.box"
  config.vm.box_url = "https://github.com/CommanderK5/packer-centos-template/releases/download/0.6.7/vagrant-centos-6.7.box"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # tomcat service
  config.vm.network "forwarded_port", guest: 8080, host: 8080
  # translation nodejs service
  config.vm.network "forwarded_port", guest: 8094, host: 8094
  # merge nodejs service
  config.vm.network "forwarded_port", guest: 8096, host: 8096

  # rsync works on vsphere and virtualbox
  config.vm.synced_folder "../el6", "/home/vagrant/el6", type: "rsync"

  # This makes caching more efficient if you're using squid or similar.
  if "#{ENV['http_proxy']}" != ""
    config.vm.provision "proxy", type: "shell", inline: <<-SHELL
      cat /etc/yum.repos.d/CentOS-Base.repo | sed -e s/mirrorlist=/#mirrorlist=/g | sed -e s/#baseurl=/baseurl=/g  sudo tee /etc/yum.repos.d/CentOS-Base.repo
      cat /etc/yum.repos.d/epel.repo | sed -e s/mirrorlist=/#mirrorlist=/g | sed -e s/#baseurl=/baseurl=/g  sudo tee /etc/yum.repos.d/epel.repo

      echo "proxy=#{ENV['http_proxy']}" | sudo tee -a /etc/yum.conf

      # wget (maybe others?) will use the proxy
      echo "export http_proxy=#{ENV['http_proxy']}" >> .bashrc
    SHELL
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: $provisionSh
end

# Allow local overrides of vagrant settings
if File.exists?('VagrantfileLocal')
  load 'VagrantfileLocal'
end

